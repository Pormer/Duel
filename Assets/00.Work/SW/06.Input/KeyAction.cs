//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/00.Work/SW/06.Input/KeyAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyAction"",
    ""maps"": [
        {
            ""name"": ""LeftInput"",
            ""id"": ""ce0827b5-575f-4c69-9af7-5dabf735ba12"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ae46a792-79ad-40c2-b499-70e423eb96a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""bd13e481-3a62-418a-aeb6-126b51f9d74f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Barrier"",
                    ""type"": ""Button"",
                    ""id"": ""c712c45f-619c-4385-939c-4e6ac92e250c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementUp"",
                    ""type"": ""Button"",
                    ""id"": ""11a2bfd3-3526-4ca4-8644-f906dce982a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementDown"",
                    ""type"": ""Button"",
                    ""id"": ""32772351-c6a1-4bd9-a9e7-cdb27957195e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementLeft"",
                    ""type"": ""Button"",
                    ""id"": ""43708cd4-c3e0-4389-9c78-c9b5d5db3386"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementRight"",
                    ""type"": ""Button"",
                    ""id"": ""898ecf2a-6448-45f6-9068-a55410b43945"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3622c948-fb37-469d-b97e-0c9d1c4418c0"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1773464d-8830-4342-8f4e-4869ce95d5a7"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d8ea522-e4cf-49d6-b148-b7d03c3746f2"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Barrier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d525905-c8d7-4167-aefe-c9677b9077ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cf38ec9-050e-470a-b7d4-b766b694501f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98fd5e07-4b50-4c98-892b-05ae37379a32"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89d6cb73-a95d-4cae-84a7-db6ae5c45297"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightInput"",
            ""id"": ""6b0466f9-b3f1-486f-bb69-18dbb6375cfb"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""73348dab-28d0-4847-ab23-94b21cfff979"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""ce9b4d02-0c2f-4240-bb31-0d8d6e9f2462"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Barrier"",
                    ""type"": ""Button"",
                    ""id"": ""46f9b0e7-f25f-41bb-b87b-908e39e1d5fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementUp"",
                    ""type"": ""Button"",
                    ""id"": ""8a97ea6a-6f30-4867-8843-bd00bf6276ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementDown"",
                    ""type"": ""Button"",
                    ""id"": ""9096223b-6659-4c5e-9128-1f6bba1dd8db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1288653d-9f6f-4bcb-ae84-8f2a5cc639d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementRight"",
                    ""type"": ""Button"",
                    ""id"": ""8c31a93f-8af2-45b9-8667-a51e44b94024"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d668c647-a488-4aed-b812-201f6d7ec755"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87bc7db8-f45c-4efe-b84e-de57dbde7f9c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7f8d2ef-db3c-4528-82c6-93df08eb7972"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Barrier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90fb69c9-4dbc-420d-94bc-9112e09e8e05"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5695c5c-0058-4917-a019-724178ead4d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2d25f7c-abf7-4494-a425-9415045d0729"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a51f89e-f15c-40ae-97b1-ff041409c470"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""41d738e7-0e4e-4672-9b7f-1ec4b328d2e0"",
            ""actions"": [
                {
                    ""name"": ""Setting"",
                    ""type"": ""Button"",
                    ""id"": ""258cf276-7b49-403f-9d4a-099924f9689a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9f81b32-f022-476f-99ba-5c67469243e9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Setting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        
        // LeftInput
        m_LeftInput = asset.FindActionMap("LeftInput", throwIfNotFound: true);
        m_LeftInput_Shoot = m_LeftInput.FindAction("Shoot", throwIfNotFound: true);
        m_LeftInput_Skill = m_LeftInput.FindAction("Skill", throwIfNotFound: true);
        m_LeftInput_Barrier = m_LeftInput.FindAction("Barrier", throwIfNotFound: true);
        m_LeftInput_MovementUp = m_LeftInput.FindAction("MovementUp", throwIfNotFound: true);
        m_LeftInput_MovementDown = m_LeftInput.FindAction("MovementDown", throwIfNotFound: true);
        m_LeftInput_MovementLeft = m_LeftInput.FindAction("MovementLeft", throwIfNotFound: true);
        m_LeftInput_MovementRight = m_LeftInput.FindAction("MovementRight", throwIfNotFound: true);
        // RightInput
        m_RightInput = asset.FindActionMap("RightInput", throwIfNotFound: true);
        m_RightInput_Shoot = m_RightInput.FindAction("Shoot", throwIfNotFound: true);
        m_RightInput_Skill = m_RightInput.FindAction("Skill", throwIfNotFound: true);
        m_RightInput_Barrier = m_RightInput.FindAction("Barrier", throwIfNotFound: true);
        m_RightInput_MovementUp = m_RightInput.FindAction("MovementUp", throwIfNotFound: true);
        m_RightInput_MovementDown = m_RightInput.FindAction("MovementDown", throwIfNotFound: true);
        m_RightInput_MovementLeft = m_RightInput.FindAction("MovementLeft", throwIfNotFound: true);
        m_RightInput_MovementRight = m_RightInput.FindAction("MovementRight", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Setting = m_UI.FindAction("Setting", throwIfNotFound: true);
    }

    ~@KeyAction()
    {
        UnityEngine.Debug.Assert(!m_LeftInput.enabled, "This will cause a leak and performance issues, KeyAction.LeftInput.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightInput.enabled, "This will cause a leak and performance issues, KeyAction.RightInput.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, KeyAction.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftInput
    private readonly InputActionMap m_LeftInput;
    private List<ILeftInputActions> m_LeftInputActionsCallbackInterfaces = new List<ILeftInputActions>();
    private readonly InputAction m_LeftInput_Shoot;
    private readonly InputAction m_LeftInput_Skill;
    private readonly InputAction m_LeftInput_Barrier;
    private readonly InputAction m_LeftInput_MovementUp;
    private readonly InputAction m_LeftInput_MovementDown;
    private readonly InputAction m_LeftInput_MovementLeft;
    private readonly InputAction m_LeftInput_MovementRight;
    public struct LeftInputActions
    {
        private @KeyAction m_Wrapper;
        public LeftInputActions(@KeyAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_LeftInput_Shoot;
        public InputAction @Skill => m_Wrapper.m_LeftInput_Skill;
        public InputAction @Barrier => m_Wrapper.m_LeftInput_Barrier;
        public InputAction @MovementUp => m_Wrapper.m_LeftInput_MovementUp;
        public InputAction @MovementDown => m_Wrapper.m_LeftInput_MovementDown;
        public InputAction @MovementLeft => m_Wrapper.m_LeftInput_MovementLeft;
        public InputAction @MovementRight => m_Wrapper.m_LeftInput_MovementRight;
        public InputActionMap Get() { return m_Wrapper.m_LeftInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftInputActions set) { return set.Get(); }
        public void AddCallbacks(ILeftInputActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftInputActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
            @Barrier.started += instance.OnBarrier;
            @Barrier.performed += instance.OnBarrier;
            @Barrier.canceled += instance.OnBarrier;
            @MovementUp.started += instance.OnMovementUp;
            @MovementUp.performed += instance.OnMovementUp;
            @MovementUp.canceled += instance.OnMovementUp;
            @MovementDown.started += instance.OnMovementDown;
            @MovementDown.performed += instance.OnMovementDown;
            @MovementDown.canceled += instance.OnMovementDown;
            @MovementLeft.started += instance.OnMovementLeft;
            @MovementLeft.performed += instance.OnMovementLeft;
            @MovementLeft.canceled += instance.OnMovementLeft;
            @MovementRight.started += instance.OnMovementRight;
            @MovementRight.performed += instance.OnMovementRight;
            @MovementRight.canceled += instance.OnMovementRight;
        }

        private void UnregisterCallbacks(ILeftInputActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
            @Barrier.started -= instance.OnBarrier;
            @Barrier.performed -= instance.OnBarrier;
            @Barrier.canceled -= instance.OnBarrier;
            @MovementUp.started -= instance.OnMovementUp;
            @MovementUp.performed -= instance.OnMovementUp;
            @MovementUp.canceled -= instance.OnMovementUp;
            @MovementDown.started -= instance.OnMovementDown;
            @MovementDown.performed -= instance.OnMovementDown;
            @MovementDown.canceled -= instance.OnMovementDown;
            @MovementLeft.started -= instance.OnMovementLeft;
            @MovementLeft.performed -= instance.OnMovementLeft;
            @MovementLeft.canceled -= instance.OnMovementLeft;
            @MovementRight.started -= instance.OnMovementRight;
            @MovementRight.performed -= instance.OnMovementRight;
            @MovementRight.canceled -= instance.OnMovementRight;
        }

        public void RemoveCallbacks(ILeftInputActions instance)
        {
            if (m_Wrapper.m_LeftInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftInputActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftInputActions @LeftInput => new LeftInputActions(this);

    // RightInput
    private readonly InputActionMap m_RightInput;
    private List<IRightInputActions> m_RightInputActionsCallbackInterfaces = new List<IRightInputActions>();
    private readonly InputAction m_RightInput_Shoot;
    private readonly InputAction m_RightInput_Skill;
    private readonly InputAction m_RightInput_Barrier;
    private readonly InputAction m_RightInput_MovementUp;
    private readonly InputAction m_RightInput_MovementDown;
    private readonly InputAction m_RightInput_MovementLeft;
    private readonly InputAction m_RightInput_MovementRight;
    public struct RightInputActions
    {
        private @KeyAction m_Wrapper;
        public RightInputActions(@KeyAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_RightInput_Shoot;
        public InputAction @Skill => m_Wrapper.m_RightInput_Skill;
        public InputAction @Barrier => m_Wrapper.m_RightInput_Barrier;
        public InputAction @MovementUp => m_Wrapper.m_RightInput_MovementUp;
        public InputAction @MovementDown => m_Wrapper.m_RightInput_MovementDown;
        public InputAction @MovementLeft => m_Wrapper.m_RightInput_MovementLeft;
        public InputAction @MovementRight => m_Wrapper.m_RightInput_MovementRight;
        public InputActionMap Get() { return m_Wrapper.m_RightInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightInputActions set) { return set.Get(); }
        public void AddCallbacks(IRightInputActions instance)
        {
            if (instance == null || m_Wrapper.m_RightInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightInputActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
            @Barrier.started += instance.OnBarrier;
            @Barrier.performed += instance.OnBarrier;
            @Barrier.canceled += instance.OnBarrier;
            @MovementUp.started += instance.OnMovementUp;
            @MovementUp.performed += instance.OnMovementUp;
            @MovementUp.canceled += instance.OnMovementUp;
            @MovementDown.started += instance.OnMovementDown;
            @MovementDown.performed += instance.OnMovementDown;
            @MovementDown.canceled += instance.OnMovementDown;
            @MovementLeft.started += instance.OnMovementLeft;
            @MovementLeft.performed += instance.OnMovementLeft;
            @MovementLeft.canceled += instance.OnMovementLeft;
            @MovementRight.started += instance.OnMovementRight;
            @MovementRight.performed += instance.OnMovementRight;
            @MovementRight.canceled += instance.OnMovementRight;
        }

        private void UnregisterCallbacks(IRightInputActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
            @Barrier.started -= instance.OnBarrier;
            @Barrier.performed -= instance.OnBarrier;
            @Barrier.canceled -= instance.OnBarrier;
            @MovementUp.started -= instance.OnMovementUp;
            @MovementUp.performed -= instance.OnMovementUp;
            @MovementUp.canceled -= instance.OnMovementUp;
            @MovementDown.started -= instance.OnMovementDown;
            @MovementDown.performed -= instance.OnMovementDown;
            @MovementDown.canceled -= instance.OnMovementDown;
            @MovementLeft.started -= instance.OnMovementLeft;
            @MovementLeft.performed -= instance.OnMovementLeft;
            @MovementLeft.canceled -= instance.OnMovementLeft;
            @MovementRight.started -= instance.OnMovementRight;
            @MovementRight.performed -= instance.OnMovementRight;
            @MovementRight.canceled -= instance.OnMovementRight;
        }

        public void RemoveCallbacks(IRightInputActions instance)
        {
            if (m_Wrapper.m_RightInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightInputActions instance)
        {
            foreach (var item in m_Wrapper.m_RightInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightInputActions @RightInput => new RightInputActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Setting;
    public struct UIActions
    {
        private @KeyAction m_Wrapper;
        public UIActions(@KeyAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Setting => m_Wrapper.m_UI_Setting;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Setting.started += instance.OnSetting;
            @Setting.performed += instance.OnSetting;
            @Setting.canceled += instance.OnSetting;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Setting.started -= instance.OnSetting;
            @Setting.performed -= instance.OnSetting;
            @Setting.canceled -= instance.OnSetting;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface ILeftInputActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
        void OnBarrier(InputAction.CallbackContext context);
        void OnMovementUp(InputAction.CallbackContext context);
        void OnMovementDown(InputAction.CallbackContext context);
        void OnMovementLeft(InputAction.CallbackContext context);
        void OnMovementRight(InputAction.CallbackContext context);
    }
    public interface IRightInputActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
        void OnBarrier(InputAction.CallbackContext context);
        void OnMovementUp(InputAction.CallbackContext context);
        void OnMovementDown(InputAction.CallbackContext context);
        void OnMovementLeft(InputAction.CallbackContext context);
        void OnMovementRight(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSetting(InputAction.CallbackContext context);
    }
}
