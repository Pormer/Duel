//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/00.Work/SW/06.Input/KeyAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyAction"",
    ""maps"": [
        {
            ""name"": ""LeftInput"",
            ""id"": ""829c998b-dbb6-4b34-a656-6b6d29e886f0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""eb238773-9cad-4bee-a22d-85064bb901aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerEvent"",
                    ""type"": ""Button"",
                    ""id"": ""3435f9bb-615e-48d1-b518-fc1108046cbb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""320d05a2-cf7a-40f6-8e70-712d84802e57"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c5dadd9-d1a3-45ff-a344-befa11d2cdc8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e7ddcc1-5c6e-4244-8849-ffb76e73007c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b40cccb-ef1f-4e27-8e5e-60e568b88b88"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246b90c6-f42f-4dca-a837-4b591e949e8f"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce01fadd-076c-4b65-95cc-d3af94163562"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0d33706-52e9-4a63-8d99-5f3352bdd290"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightInput"",
            ""id"": ""f638eb7a-4cee-460c-a8f3-a857c8b8fdcf"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""f82df36d-fd87-4dd3-96ec-971915346dc5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerEvent"",
                    ""type"": ""Button"",
                    ""id"": ""d2391cda-9c3b-4dca-bdf8-0f65a8612fb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2f9cb82-e611-48b0-85ad-06892207c15d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0079f521-8576-4b58-b521-b7ee0629a294"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddfd51a3-1395-46fd-8054-659fd7460297"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97f815fd-e204-417d-866b-fee351be0cc8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8368f9d5-76e5-4977-ae2f-fd53435fabf3"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59bbfa40-7c11-4ec5-947e-97af8fa599a8"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ef8bbe1-f96a-4e9d-ac93-20c721a66206"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftInput
        m_LeftInput = asset.FindActionMap("LeftInput", throwIfNotFound: true);
        m_LeftInput_Movement = m_LeftInput.FindAction("Movement", throwIfNotFound: true);
        m_LeftInput_PlayerEvent = m_LeftInput.FindAction("PlayerEvent", throwIfNotFound: true);
        // RightInput
        m_RightInput = asset.FindActionMap("RightInput", throwIfNotFound: true);
        m_RightInput_Movement = m_RightInput.FindAction("Movement", throwIfNotFound: true);
        m_RightInput_PlayerEvent = m_RightInput.FindAction("PlayerEvent", throwIfNotFound: true);
    }

    ~@KeyAction()
    {
        UnityEngine.Debug.Assert(!m_LeftInput.enabled, "This will cause a leak and performance issues, KeyAction.LeftInput.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightInput.enabled, "This will cause a leak and performance issues, KeyAction.RightInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftInput
    private readonly InputActionMap m_LeftInput;
    private List<ILeftInputActions> m_LeftInputActionsCallbackInterfaces = new List<ILeftInputActions>();
    private readonly InputAction m_LeftInput_Movement;
    private readonly InputAction m_LeftInput_PlayerEvent;
    public struct LeftInputActions
    {
        private @KeyAction m_Wrapper;
        public LeftInputActions(@KeyAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_LeftInput_Movement;
        public InputAction @PlayerEvent => m_Wrapper.m_LeftInput_PlayerEvent;
        public InputActionMap Get() { return m_Wrapper.m_LeftInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftInputActions set) { return set.Get(); }
        public void AddCallbacks(ILeftInputActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @PlayerEvent.started += instance.OnPlayerEvent;
            @PlayerEvent.performed += instance.OnPlayerEvent;
            @PlayerEvent.canceled += instance.OnPlayerEvent;
        }

        private void UnregisterCallbacks(ILeftInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @PlayerEvent.started -= instance.OnPlayerEvent;
            @PlayerEvent.performed -= instance.OnPlayerEvent;
            @PlayerEvent.canceled -= instance.OnPlayerEvent;
        }

        public void RemoveCallbacks(ILeftInputActions instance)
        {
            if (m_Wrapper.m_LeftInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftInputActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftInputActions @LeftInput => new LeftInputActions(this);

    // RightInput
    private readonly InputActionMap m_RightInput;
    private List<IRightInputActions> m_RightInputActionsCallbackInterfaces = new List<IRightInputActions>();
    private readonly InputAction m_RightInput_Movement;
    private readonly InputAction m_RightInput_PlayerEvent;
    public struct RightInputActions
    {
        private @KeyAction m_Wrapper;
        public RightInputActions(@KeyAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_RightInput_Movement;
        public InputAction @PlayerEvent => m_Wrapper.m_RightInput_PlayerEvent;
        public InputActionMap Get() { return m_Wrapper.m_RightInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightInputActions set) { return set.Get(); }
        public void AddCallbacks(IRightInputActions instance)
        {
            if (instance == null || m_Wrapper.m_RightInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @PlayerEvent.started += instance.OnPlayerEvent;
            @PlayerEvent.performed += instance.OnPlayerEvent;
            @PlayerEvent.canceled += instance.OnPlayerEvent;
        }

        private void UnregisterCallbacks(IRightInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @PlayerEvent.started -= instance.OnPlayerEvent;
            @PlayerEvent.performed -= instance.OnPlayerEvent;
            @PlayerEvent.canceled -= instance.OnPlayerEvent;
        }

        public void RemoveCallbacks(IRightInputActions instance)
        {
            if (m_Wrapper.m_RightInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightInputActions instance)
        {
            foreach (var item in m_Wrapper.m_RightInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightInputActions @RightInput => new RightInputActions(this);
    public interface ILeftInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPlayerEvent(InputAction.CallbackContext context);
    }
    public interface IRightInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPlayerEvent(InputAction.CallbackContext context);
    }
}
